package academy.learnprograming;

public class Hero {
    String name;
    int hp;
    Sword sword;
    // static
    // 1, フィールド変数の実体がクラスに準備される 2, 全インスタンスに箱の分身が準備される 3, インスタンスが生成されていなくてもアクセスできる
    // static メソッド
    // 1, メソッド自体がクラスに属するようになる 2, インスタンスにメソッドの分身が準備される 3, インスタンスを1つも生み出すことなく呼び出せる
    // 3の理由から、staticがついてないフィールドやメソッドは利用できない
    static int money;

    void attack(){
        System.out.println(this.name + "は攻撃した！");
        System.out.println("敵に5ポイントのダメージ与えた!");
    }
    // コンストラクタ
    // 1, メソッド名がクラス名と完全に等しい 2, メソッド宣言に戻り値が記述されていない
    // クラスがnewされた直後に自動的に実行される
    // 意識すべきは、「プログラマが直接呼び出しているわけではない」という事
    // あくまでインスタンスを生成することによって、間接的にHero()が実行される
    // ❇ ︎1つもコンストラクタが定義されていない場合に限って、
    // 「引数なし、処理内容なし」のコンストラクタ(デフォルトコンストラクタ)
    // の定義がコンパイル時に自動的に追加される
    Hero(String name){
        this.hp = 100;
        this.name = name;
    }

    Hero(){
//        this.hp = 100;
//        this.Hero("ダミー"); // エラー
        this("ダミー");
    }
}
